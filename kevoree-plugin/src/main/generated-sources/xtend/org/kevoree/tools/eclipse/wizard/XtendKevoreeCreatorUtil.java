package org.kevoree.tools.eclipse.wizard;

import com.google.common.base.Objects;
import org.eclipse.jdt.core.IPackageFragment;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class XtendKevoreeCreatorUtil {
  private XtendKevoreeCreatorUtil() {
  }
  
  private static XtendKevoreeCreatorUtil _instance;
  
  public static XtendKevoreeCreatorUtil getInstance() {
    boolean _equals = Objects.equal(XtendKevoreeCreatorUtil._instance, null);
    if (_equals) {
      XtendKevoreeCreatorUtil _xtendKevoreeCreatorUtil = new XtendKevoreeCreatorUtil();
      XtendKevoreeCreatorUtil._instance = _xtendKevoreeCreatorUtil;
    }
    return XtendKevoreeCreatorUtil._instance;
  }
  
  public String createPackageDeclaration(final String typeName, final IPackageFragment packageFragment, final String lineSeparator) {
    StringBuffer _stringBuffer = new StringBuffer();
    StringBuffer sb = _stringBuffer;
    boolean _and = false;
    String _elementName = packageFragment.getElementName();
    boolean _notEquals = (!Objects.equal(_elementName, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _elementName_1 = packageFragment.getElementName();
      boolean _equals = _elementName_1.equals("");
      boolean _not = (!_equals);
      _and = (_notEquals && _not);
    }
    if (_and) {
      sb.append("package ");
      String _elementName_2 = packageFragment.getElementName();
      sb.append(_elementName_2);
      sb.append(lineSeparator);
    }
    return sb.toString();
  }
  
  public String createKevoreeComponentXtend(final String componentName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.kevoree.ContainerRoot");
    _builder.newLine();
    _builder.append("import org.kevoree.annotation.ComponentType");
    _builder.newLine();
    _builder.append("import org.kevoree.annotation.Input");
    _builder.newLine();
    _builder.append("import org.kevoree.annotation.KevoreeInject");
    _builder.newLine();
    _builder.append("import org.kevoree.annotation.Output");
    _builder.newLine();
    _builder.append("import org.kevoree.annotation.Param");
    _builder.newLine();
    _builder.append("import org.kevoree.annotation.Start");
    _builder.newLine();
    _builder.append("import org.kevoree.annotation.Stop");
    _builder.newLine();
    _builder.append("import org.kevoree.api.KevScriptService");
    _builder.newLine();
    _builder.append("import org.kevoree.api.ModelService");
    _builder.newLine();
    _builder.append("import org.kevoree.api.Port");
    _builder.newLine();
    _builder.append("import org.kevoree.cloner.DefaultModelCloner");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@ComponentType");
    _builder.newLine();
    _builder.append("class ");
    _builder.append(componentName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Start");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public def startComponent() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("println(\"Start\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Stop");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public def stopComponent() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("println(\"Stop\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Input");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public def consumeHello(Object o) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("println(\"Received \" + o.toString());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (o instanceof String) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var msg = o as String;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("println(\"HelloConsumer received: \" + msg);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Output");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Port simplePort;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Param(defaultValue=\"2000\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Property");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int myparameter = 2000;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//Init the variables (from inside a component)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var cloner = new DefaultModelCloner();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@KevoreeInject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private KevScriptService kevScriptService;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@KevoreeInject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ModelService modelService;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def adaptComponent() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//Get the current Model");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var model = modelService.getCurrentModel();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Clone the model to make it changeable");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var ContainerRoot localModel = cloner.clone(model.getModel()) as ContainerRoot");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Apply the script on the current model, to get a new configuration");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("kevScriptService.execute(\"//kevscripttoapply\", localModel)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//Ask the platform to apply the new model; register an optional callback to know when the adaptation is finised.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("modelService.update(localModel, [e | println(\"ok\")])");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}\t\t");
    _builder.newLine();
    final String template = _builder.toString();
    return template;
  }
  
  public String createKevoreeGroupXtend(final String groupName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.kevoree.ContainerRoot");
    _builder.newLine();
    _builder.append("import org.kevoree.annotation.GroupType");
    _builder.newLine();
    _builder.append("import org.kevoree.annotation.KevoreeInject");
    _builder.newLine();
    _builder.append("import org.kevoree.annotation.Library");
    _builder.newLine();
    _builder.append("import org.kevoree.annotation.Start");
    _builder.newLine();
    _builder.append("import org.kevoree.annotation.Stop");
    _builder.newLine();
    _builder.append("import org.kevoree.api.ModelService");
    _builder.newLine();
    _builder.append("import org.kevoree.api.handler.ModelListener");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@GroupType");
    _builder.newLine();
    _builder.append("@Library(name=\"Java\")");
    _builder.newLine();
    _builder.append("class ");
    _builder.append(groupName, "");
    _builder.append(" implements ModelListener {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@KevoreeInject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ModelService modelService;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Start");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void start() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Stop");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void stop() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override def boolean preUpdate(ContainerRoot currentModel, ContainerRoot proposedModel) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override def boolean initUpdate(ContainerRoot currentModel, ContainerRoot proposedModel) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override def boolean afterLocalUpdate(ContainerRoot currentModel, ContainerRoot proposedModel) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override def void modelUpdated() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override def void preRollback(ContainerRoot currentModel, ContainerRoot proposedModel) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override def void postRollback(ContainerRoot currentModel, ContainerRoot proposedModel) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String template = _builder.toString();
    return template;
  }
  
  public String createKevoreeChannelXtend(final String channelName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.kevoree.annotation.ChannelType");
    _builder.newLine();
    _builder.append("import org.kevoree.annotation.KevoreeInject");
    _builder.newLine();
    _builder.append("import org.kevoree.annotation.Library");
    _builder.newLine();
    _builder.append("import org.kevoree.api.Callback");
    _builder.newLine();
    _builder.append("import org.kevoree.api.ChannelContext");
    _builder.newLine();
    _builder.append("import org.kevoree.api.ChannelDispatch");
    _builder.newLine();
    _builder.append("import org.kevoree.api.Port");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@ChannelType");
    _builder.newLine();
    _builder.append("@Library(name = \"Java\")");
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(channelName, "");
    _builder.append(" implements ChannelDispatch {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@KevoreeInject");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ChannelContext channelContext;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def override  ^dispatch(Object payload, Callback callback) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Port p : channelContext.getLocalPorts()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("p.call(payload, callback);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String template = _builder.toString();
    return template;
  }
  
  public String createKevoreeComponentJava(final String componentName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("import org.kevoree.annotation.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@ComponentType");
    _builder.newLine();
    _builder.append("@Library(name = \"Java\")");
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(componentName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Param(defaultValue = \"Default Content\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("String message;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@KevoreeInject");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("org.kevoree.api.Context context;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Output");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("org.kevoree.api.Port out;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Input");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String in(Object i) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String msg = message+\" from \"+context.getInstanceName()+\"@\"+context.getNodeName();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("System.out.println(msg);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("out.send(msg);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return msg;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Start");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void start() {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Stop");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void stop() {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Update");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void update() {System.out.println(\"Param updated!\");}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    final String template = _builder.toString();
    return template;
  }
  
  public String createKevoreeGroupJava(final String groupName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.kevoree.annotation.*;");
    _builder.newLine();
    _builder.append("import org.kevoree.api.handler.ModelListener;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@GroupType");
    _builder.newLine();
    _builder.append("@Library(name = \"Java\")");
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(groupName, "");
    _builder.append(" implements ModelListener {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@KevoreeInject");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ModelService modelService;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Start");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void start() {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Stop");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void stop() {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean preUpdate(ContainerRoot currentModel, ContainerRoot proposedModel) {return true;}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean initUpdate(ContainerRoot currentModel, ContainerRoot proposedModel) {return true;}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean afterLocalUpdate(ContainerRoot currentModel, ContainerRoot proposedModel) {return true;}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void modelUpdated() {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void preRollback(ContainerRoot currentModel, ContainerRoot proposedModel) {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void postRollback(ContainerRoot currentModel, ContainerRoot proposedModel) {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String template = _builder.toString();
    return template;
  }
  
  public String createKevoreeChannelJava(final String channelName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.kevoree.annotation.*;");
    _builder.newLine();
    _builder.append("import org.kevoree.api.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@ChannelType");
    _builder.newLine();
    _builder.append("@Library(name = \"Java\")");
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(channelName, "");
    _builder.append(" implements ChannelDispatch {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@KevoreeInject");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ChannelContext channelContext;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void dispatch(final Object payload, final Callback callback) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (Port p : channelContext.getLocalPorts()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("p.call(payload, callback);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}    ");
    _builder.newLine();
    final String template = _builder.toString();
    return template;
  }
}
